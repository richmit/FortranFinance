# -*- Mode:Org; Coding:utf-8; fill-column:158 -*-
# ######################################################################################################################################################.H.S.##
# FILE:        index.org
#+TITLE:       Fortran Finance
#+SUBTITLE:    Monte Carlo Simulation
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DATE:        2025-01-02
#+DESCRIPTION: Documentation for monte carlo examples in the Fortran Finance repository.
#+KEYWORDS:    finance fortran monte carlo inflation cashflow time value of money tvm percentages taxes stock market
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil
#+SEQ_TODO:    TODO:NEW(t)                         TODO:WORK(w)    TODO:HOLD(h)    | TODO:FUTURE(f)   TODO:DONE(d)    TODO:CANCELED(c)
#+PROPERTY: header-args :eval never-export
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
# Change max-width to get wider output -- also note #content style below
#+HTML_HEAD: <style>body { min-width: 500px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>.subtitle { font-size: 0.6em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_HEAD: <style>blockquote { margin-bottom: 0.5em; padding: 0.5em; background-color: #FFF8DC; border-left: 2px solid #A5573E; border-left-color: rgb(255, 228, 102); display: block; margin-block-start: 1em; margin-block-end: 1em; margin-inline-start: 5em; margin-inline-end: 5em; } </style>
# Change the following to get wider output -- also note body style above
#+HTML_HEAD: <style>#content { max-width: 60em; }</style>
#+HTML_LINK_HOME: https://github.com/richmit/FortranFinance
#+HTML_LINK_UP: https://richmit.github.io/FortranFinance/index.html
# ######################################################################################################################################################.H.E.##

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
|          <r> | <l>                                          |
|    *Author:* | /{{{author}}}/                               |
|   *Updated:* | /{{{modification-time(%Y-%m-%d %H:%M:%S)}}}/ |
| *Generated:* | /{{{time(%Y-%m-%d %H:%M:%S)}}}/              |
#+ATTR_HTML: :align center
Copyright \copy {{{time(%Y)}}} Mitch Richling. All rights reserved.

#+TOC: headlines 5

These examples both use simple, resampling monte carlo on historical US financial data.  Both examples include both Fortran code to run the simulations, and R
code to visualize them.  One of the examples illustrates endpoint distribution forecasting while the other illustrates trajectory forecasting.

* ~inflation.f90~ & ~inflation.R~
:PROPERTIES:
:CUSTOM_ID: inflation
:END:

#+begin_src sh :results output verbatum :exports results :wrap "org"
~/core/codeBits/bin/srcHdrInfo -i details ../../monte_carlo/inflation.f90
#+end_src

#+RESULTS:
#+begin_org
  This program runs 100000 (~tirals~) Monte Carlo simulations of inflation for $100 (~initial_value~) over 20 (~years~) years
  using the last 30 (~mc_history_years~) years of historical US inflation data.  This program prints the value after 20 years
  for each simulation to ~STDOUT~.  If placed in a file, this data may be consumed by ~inflation.R~ to produce a nice histogram
  showing the probability of the value after 100 years.
#+end_org

  [[file:pics/inflation_full.png][file:pics/inflation_800x.png]]

Here is the Fortran code ([[https://github.com/richmit/FortranFinance/blob/main/monte_carlo/inflation.f90][inflation.f90]]):

#+begin_src sh :results output verbatum :exports results :wrap "src f90 :eval never :tangle no"
~/core/codeBits/bin/src2orgListing ../../monte_carlo/inflation.f90
#+end_src

#+RESULTS:
#+begin_src f90 :eval never :tangle no
program inflation
  use mrffl_config, only: rk=>mrfflrk, ik=>mrfflik
  use mrffl_us_inflation

  integer,          parameter :: years            = 20      ! Number of years to project out our inflation adjusted value
  integer(kind=ik), parameter :: mc_history_years = 30      ! Number of years of US inflation data for our random inflation values
  integer,          parameter :: trials           = 100000  ! Number of trials to run
  real(kind=rk),    parameter :: initial_value    = 100     ! This is the value we will inflation adjusted over the years

  real(kind=rk)               :: value
  real(kind=rk)               :: i
  integer                     :: year, trial

  ! Run monte carlo simulations and dump the results to STDOUT
  print *, "trial value"
  do trial=1,trials
     value = initial_value
     do year=2,years
        i =  inf_resample(mc_history_years)
        value = value * (1 - i/100)
     end do
     print *, trial, value
  end do

end program inflation
#+end_src

And here is the R code ([[https://github.com/richmit/FortranFinance/blob/main/monte_carlo/inflation.R][inflation.R]]):

#+begin_src sh :results output verbatum :exports results :wrap "src R :eval never :tangle no"
~/core/codeBits/bin/src2orgListing ../../monte_carlo/inflation.R
#+end_src

#+RESULTS:
#+begin_src R :eval never :tangle no
# Set this to your favorite image viewer, or TRUE to attempt to find one automatically, or FALSE to not load images
imageV <- TRUE

# Try and find an image viewer
if (imageV == TRUE) {
  if (.Platform$OS == "windows") {
    imageV <- "explorer"
  } else {
    for(piv in c("/usr/bin/display", "/usr/bin/pqiv", "/usr/bin/nomacs"))
      if(file.exists(piv))
        imageV <- piv
  }
}

daDat <- fread("inflation.txt")

gp <- ggplot(data=daDat) +
  geom_histogram(aes(x=value), bins=30, col='black', fill='pink') +
  labs(title='Value of $100 after 20 years', x='Value', y='Count')

fname <- "inflation.png"
ggsave(fname, width=12, height=10)
if (is.character(imageV)) system(paste(imageV, fname, sep=' '))
#+end_src

* ~stocks.f90~ & ~stocks.R~
:PROPERTIES:
:CUSTOM_ID: stocks
:END:

#+begin_src sh :results output verbatum :exports results :wrap "org"
~/core/codeBits/bin/srcHdrInfo -i details  ../../monte_carlo/stocks.f90
#+end_src

#+RESULTS:
#+begin_org
  This program runs 2000 (~trials~) stocks simulations on $100 (~initial_value~).  Each simulation is over 20 (~years~) years
  using the last 30 (~mc_history_years~) years of historical US stocks data.  This program prints the resulting value of each
  simulation to STDOUT.  If placed in a file, this data may be consumed by ~stocks.R~ to produce a nice histogram showing the
  probability of the value after 100 years.
#+end_org

  [[file:pics/stocks_paths_full.png][file:pics/stocks_paths_800x.png]]

  [[file:pics/stocks_ranges_full.png][file:pics/stocks_ranges_800x.png]]

Here is the Fortran code ([[https://github.com/richmit/FortranFinance/blob/main/monte_carlo/stocks.f90][stocks.f90]]):

#+begin_src sh :results output verbatum :exports results :wrap "src f90 :eval never :tangle no"
~/core/codeBits/bin/src2orgListing ../../monte_carlo/stocks.f90
#+end_src

#+RESULTS:
#+begin_src f90 :eval never :tangle no
program stocks
  use mrffl_config, only: rk=>mrfflrk, ik=>mrfflik
  use mrffl_us_markets, only: rut_resample
  use mrffl_percentages, only: add_percentage

  integer,          parameter :: years            = 20      ! Number of years to project out our stocks adjusted value
  integer(kind=ik), parameter :: mc_history_years = 30      ! Number of years of US stocks data for our random stocks values
  integer,          parameter :: trials           = 2000    ! Number of trials to run
  real(kind=rk),    parameter :: initial_value    = 100     ! This is the value we will stocks adjusted over the years

  real(kind=rk)               :: value
  real(kind=rk)               :: i
  integer                     :: year, trial

  ! Run monte carlo simulations and dump the results to STDOUT
  print *, "trial year value"
  do trial=1,trials
     value = initial_value
     print *, trial, 1, value
     do year=2,years
        i =  rut_resample(mc_history_years)
        value = add_percentage(value, i)
        print *, trial, year, value
     end do
  end do

end program stocks
#+end_src

And here is the R code ([[https://github.com/richmit/FortranFinance/blob/main/monte_carlo/stocks.R][stocks.R]]):

#+begin_src sh :results output verbatum :exports results :wrap "src R :eval never :tangle no"
~/core/codeBits/bin/src2orgListing ../../monte_carlo/stocks.R
#+end_src

#+RESULTS:
#+begin_src R :eval never :tangle no
# Set this to your favorite image viewer, or TRUE to attempt to find one automatically, or FALSE to not load images
imageV <- TRUE

# Try and find an image viewer
if (imageV == TRUE) {
  if (.Platform$OS == "windows") {
    imageV <- "explorer"
  } else {
    for(piv in c("/usr/bin/display", "/usr/bin/pqiv", "/usr/bin/nomacs"))
      if(file.exists(piv))
        imageV <- piv
  }
}

daDat <- fread("stocks.txt") %>% mutate(trial=factor(trial))

gp <- ggplot(data=daDat) +
  geom_line(aes(x=year, y=value+1, group=trial), alpha=0.03, linewidth=2, col='black', show.legend=FALSE) +
  scale_y_continuous(labels = scales::label_dollar(scale_cut = cut_short_scale()), trans='log10') +
  labs(title='Value of $100 after 20 years', x='Year', y='Value')

fname <- "stocks_paths.png"
ggsave(fname, width=12, height=10)
if (is.character(imageV)) system(paste(imageV, fname, sep=' '))

bands <- c(90, 80, 50)

sumDat <- group_by(daDat, year) %>%
  summarize(band_90_0 = pmax(0, quantile(value,  (50-bands[1]/2)/100)),
            band_90_1 = pmax(0, quantile(value,  (50+bands[1]/2)/100)),
            band_80_0 = pmax(0, quantile(value,  (50-bands[2]/2)/100)),
            band_80_1 = pmax(0, quantile(value,  (50+bands[2]/2)/100)),
            band_50_0 = pmax(0, quantile(value,  (50-bands[3]/2)/100)),
            band_50_1 = pmax(0, quantile(value,  (50+bands[3]/2)/100)),
            .groups='keep')

gp <- ggplot(sumDat) +
  geom_ribbon(aes(x=year, ymin=band_90_0, ymax=band_90_1), fill='darkred',   alpha=0.7) +
  geom_ribbon(aes(x=year, ymin=band_80_0, ymax=band_80_1), fill='goldenrod', alpha=0.7) +
  geom_ribbon(aes(x=year, ymin=band_50_0, ymax=band_50_1), fill='darkgreen', alpha=0.7) +
  annotate("text", x=17, y=mean(c(sumDat$band_90_0[17], sumDat$band_80_0[17])), label="90%", col='white', size=10, vjust=0.5) +
  annotate("text", x=17, y=mean(c(sumDat$band_80_0[17], sumDat$band_50_0[17])), label="80%", col='white', size=10, vjust=0.5) +
  annotate("text", x=17, y=mean(c(sumDat$band_50_0[17], sumDat$band_50_1[17])), label="50%", col='white', size=10, vjust=0.5) +
  scale_y_continuous(labels = scales::label_dollar(scale_cut = cut_short_scale()), trans='log10') +
  labs(title='Value Balance Ranges') +
  ylab('Value') +
  xlab('Year')
fname <- 'stocks_ranges.png'
ggsave(fname, width=12, height=10, dpi=100, units='in', plot=gp);
if (is.character(imageV)) system(paste(imageV, fname, sep=' '))
#+end_src

* ~blend_risk.f90~ & ~blend_risk.R~
:PROPERTIES:
:CUSTOM_ID: blend_risk
:END:

#+begin_src sh :results output verbatum :exports results :wrap "org"
~/core/codeBits/bin/srcHdrInfo -i details ../../monte_carlo/blend_risk.f90
#+end_src

#+RESULTS:
#+begin_org
  Scenario:

  We start with 4M in the bank.  Over the next 50 years we wish to withdrawal 100K at the end of each year -- and grow that
  value over time with inflation.  We invest the money in a blend of S&P 500 and US 10 year treasury bonds.

  Approach:

  For each possible integer percentage mix of S&P & bonds (i.e. percentages of S&P that range from 0% up to 100%) we run 100000
  (~trials~) simulations.  The simulations use historical data.  The technique is called "coupled resampling" where we pick a
  random year, and use the measured values for that year for all three variables (S&P 500 return, 10 year US Treasury bond
  return, and US inflation).  This technique attempts to capture the inherent correlation between the variables; however, when
  used with low resolution data it can create bias in the results.  Note we can switch to uncoupled via the variable
  ~coupled_mc~.
#+end_org

  [[file:pics/blend_risk_full.png][file:pics/blend_risk_800x.png]]

  This next image shows the difference in results between coupled resampling (correlated) and uncoupled resampling (uncorrelated) monte carlo for this
  particular scenario.

  [[file:pics/blend_risk_cvuc_full.png][file:pics/blend_risk_cvuc_800x.png]]

Here is the Fortran code ([[https://github.com/richmit/FortranFinance/blob/main/monte_carlo/blend_risk.f90][blend_risk.f90]]):

#+begin_src sh :results output verbatum :exports results :wrap "src f90 :eval never :tangle no"
~/core/codeBits/bin/src2orgListing ../../monte_carlo/blend_risk.f90
#+end_src

#+RESULTS:
#+begin_src f90 :eval never :tangle no
program blend_risk
  use mrffl_config, only: rk=>mrfflrk, ik=>mrfflik
  use mrffl_us_markets, only: snp_dat, dgs10_dat
  use mrffl_stats, only: rand_int
  use mrffl_us_inflation, only: inf_dat
  use mrffl_percentages, only: p_add=>add_percentage, p_of=>percentage_of

  integer,          parameter :: years              = 50       ! Number of years to project out our stocks adjusted value
  integer,          parameter :: trials             = 100000   ! Number of trials to run
  real(kind=rk),    parameter :: initial_balance    = 4000000  ! This is the balance we will stocks adjusted over the years
  real(kind=rk),    parameter :: initial_withdrawal = 100000   ! Annual withdrawal
  logical,          parameter :: coupled_mc         = .TRUE.   ! Use coupled resampling

  real(kind=rk)               :: balance, withdrawal, c_snp, c_dgs, c_inf
  integer                     :: year, trial, hp
  integer(kind=ik)            :: rand_year

  ! Run monte carlo simulations and dump the results to STDOUT
  print '(a10,a10,a20)', "trial", "hp", "balance"
  do hp=0,100
     do trial=1,trials
        balance = initial_balance
        withdrawal = initial_withdrawal
        do year=1,years
           if (coupled_mc) then
              rand_year = rand_int(2023, 2000)
              c_snp = snp_dat(rand_year)
              c_dgs = dgs10_dat(rand_year)
              c_inf = inf_dat(rand_year)
           else
              c_snp = snp_dat(rand_int(2023, 2000))
              c_dgs = dgs10_dat(rand_int(2023, 2000))
              c_inf = inf_dat(rand_int(2023, 2000))
           end if
           balance = p_add(p_of(balance, real(hp, rk)), c_snp) + p_add(p_of(balance, real(100-hp, rk)), c_dgs)
           balance = balance - min(withdrawal, balance)
           withdrawal = p_add(withdrawal, max(0.0_rk, c_inf))
        end do
        print '(i10,i10,f20.5)', trial, hp, balance
     end do
  end do

end program blend_risk
#+end_src

And here is the R code ([[https://github.com/richmit/FortranFinance/blob/main/monte_carlo/blend_risk.R][blend_risk.R]]):

#+begin_src sh :results output verbatum :exports results :wrap "src R :eval never :tangle no"
~/core/codeBits/bin/src2orgListing ../../monte_carlo/blend_risk.R
#+end_src

#+RESULTS:
#+begin_src R :eval never :tangle no
# Set this to your favorite image viewer, or TRUE to attempt to find one automatically, or FALSE to not load images
imageV <- TRUE

# Try and find an image viewer
if (imageV == TRUE) {
  if (.Platform$OS == "windows") {
    imageV <- "explorer"
  } else {
    for(piv in c("/usr/bin/display", "/usr/bin/pqiv", "/usr/bin/nomacs"))
      if(file.exists(piv))
        imageV <- piv
  }
}

daDat <- fread("blend_risk.txt") %>% mutate(hp=factor(hp))

## gp <- ggplot(data=daDat %>% filter(hp==75 & balance < 70e6)) +
##   geom_histogram(aes(x=balance), col='red', fill='pink', breaks=seq(0, 40e6, by=5e6)) +
##   scale_x_continuous(labels = scales::label_dollar(scale_cut = cut_short_scale())) +
##   labs(title='Ending balance of making it 50 years on 4M withdrawing 100K annually adjusted by inflation', x='Balance', y='')
## print(gp)

successDat <- daDat %>% group_by(hp) %>% summarize(success=100-100*sum(balance<=0)/length(balance), .groups='drop') %>% mutate(hp=as.integer(hp))

gp <- ggplot(data=successDat) +
  geom_smooth(aes(x=hp, y=success), method="loess", formula='y~x', span=0.2, level=.9999, se=TRUE, linewidth=2) +
  geom_text(data=successDat %>% filter(success == max(success)), aes(x=hp, y=success, label=paste('Best Chance at ', hp, '% S&P', sep='')), vjust='bottom', hjust='centered', size=6) +
  labs(title='Chances of making it 50 years on 4M withdrawing 100K annually adjusted by inflation on a mix of bonds and S&P', x='Percentage of portfolio in S&P vs. 10 Year US Treasury Bonds', y='Chance Of Success')

fname <- "blend_risk.png"
ggsave(fname, width=12, height=10)
if (is.character(imageV)) system(paste(imageV, fname, sep=' '))
#+end_src
