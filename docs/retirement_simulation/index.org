# -*- Mode:Org; Coding:utf-8; fill-column:158 -*-
# ######################################################################################################################################################.H.S.##
# FILE:        index.org
#+TITLE:       Fortran Finance
#+SUBTITLE:    Retirement Simulation
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DATE:        2025-01-02
#+DESCRIPTION: Documentation for monte carlo examples in the Fortran Finance repository.
#+KEYWORDS:    finance fortran monte carlo inflation cashflow time value of money tvm percentages taxes stock market
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil 
#+SEQ_TODO:    TODO:NEW(t)                         TODO:WORK(w)    TODO:HOLD(h)    | TODO:FUTURE(f)   TODO:DONE(d)    TODO:CANCELED(c)
#+PROPERTY: header-args :eval never-export
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
# Change max-width to get wider output -- also note #content style below
#+HTML_HEAD: <style>body { min-width: 500px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>.subtitle { font-size: 0.6em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_HEAD: <style>blockquote { margin-bottom: 0.5em; padding: 0.5em; background-color: #FFF8DC; border-left: 2px solid #A5573E; border-left-color: rgb(255, 228, 102); display: block; margin-block-start: 1em; margin-block-end: 1em; margin-inline-start: 5em; margin-inline-end: 5em; } </style>
# Change the following to get wider output -- also note body style above
#+HTML_HEAD: <style>#content { max-width: 60em; }</style>
#+HTML_LINK_HOME: https://github.com/richmit/FortranFinance
#+HTML_LINK_UP: https://richmit.github.io/FortranFinance/index.html
# ######################################################################################################################################################.H.E.##

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
|          <r> | <l>                                          |
|    *Author:* | /{{{author}}}/                               |
|   *Updated:* | /{{{modification-time(%Y-%m-%d %H:%M:%S)}}}/ |
| *Generated:* | /{{{time(%Y-%m-%d %H:%M:%S)}}}/              |
#+ATTR_HTML: :align center
Copyright \copy {{{time(%Y)}}} Mitch Richling. All rights reserved.

#+TOC: headlines 5

* Introduction
:PROPERTIES:
:CUSTOM_ID: intro
:END:

One can go quite far in answering retirement questions with nothing but TVM computations with fixed approximations for things like taxes, investment growth,
and inflation.  As retirement became more of a reality, I found myself asking questions these kinds of approximations simply couldn't address.  This simple
tool that essentially simulates the annual financial transactions for a retired couple allowing me to play out various strategies.

** The Model
:PROPERTIES:
:CUSTOM_ID: model
:END:

  - Inflation can be a fixed rate or monte carlo. 
  - The couple have a fixed set of expenses to meet every year (a budget).  This budget grows with inflation.  
    - Use the following sources in order for expenses: income, brokerage, IRA, Roth, & emergency.
    - Never use an IRA if the account holder is <60
    - Never use a Roth IRA if the account holder is <60 or the account was converted less than 5 years ago
    - This draw down strategy leads to a dip in tax rate in the early years I can use to make roth conversions.  
    - The "never use" rules could lead to unpaid expenses -- So be on the lookout for that, and adjust as required.
    - The total expenses are broken into shared expenses and expenses related to each person.  When a person dies the associated expenses are removed from the
      total.
  - They share a checking account in which they maintain a fixed balance growing with inflation.
    - If necessary, savings in other accounts are used to maintain that balance.
  - Retirement Savings
    - Each partner has an IRA and a Roth IRA
    - They share a brokerage account
    - Savings investments
      - All accounts share the same blend of investments: high returns, medium returns, low returns, and cash position
      - Each group has it's own return characteristics (fixed APR or monte carlo)
      - All funds can be moved to the cash position if total assets are sufficient to meet future expenses under a worst case inflation condition.
  - Each partner has a job.  
    - They each have a retirement date at which they will stop working.
    - While they work, they contribute to to their IRA. Maximum contributions are comprehended including "catch up" contributions after age 50.
    - Some percentage of unused income (income not used for expenses) can be saved in the brokerage account.
  - Each partner will eventually draw Social Security
    - They each have a year at which they will draw benefits.
    - Benefits are expected to grow -- this can be tied to inflation, or set an an alternate fixed rate.
  - Taxes are estimated for each year including
    - Income taxes
    - Tax impact of IRA withdrawals
    - Capital gains in the brokerage & emergency fund
      - These are taxed in the year they are made at the short range rate
    - Tax brackets are projected forward with inflation.
    - They take the standard deduction.
    - They file joint until one of them dies.
    - Taxes are paid with the same strategy as expenses.
  - They share an "emergency" fund invested in low risk investments.  Funds used as a last resort.
  - Roth Conversions
    - We convert part ira accounts to a roth ira if that year's taxable income is below a set target.
    - We convert p2 ira accounts first, and then p1 ira accounts.
  - Life expenctancy
    - Life expenctancy:
      - Can be automatically guessed from birth year & sex -- Uses US SS actuarial tables
      - Can be monte carlo -- using US SS actuarial tables taking into account current age & sex
      - Can be set to a fixed value.  In this case, sex need not be provided in the config.

** Some Observations
:PROPERTIES:
:CUSTOM_ID: obs
:END:

  - Careful tax panning may be a larger factor in a successful retirement than portfolio mix!
  - Proper portfolio mix and balancing is critical for maximizing income and minimizing risk.
  - Roth conversions can be a huge deal in maximizing long term growth.
  - Good visualizations are very important for understanding what's going on
  - Monte carlo is an important component in understanding and mitigating risk, but it requires very careful analysis.
  - Inflation really must be comprehended at every level.

** Future Plans
:PROPERTIES:
:CUSTOM_ID: future
:END:

  - +IRA to Roth IRA conversions+ (Completed 2025-01-10)
  - +Add 10 year US treasury bond yield+ (Completed 2025-01-06)
  - Blackâ€“Scholes MC -- this is mostly an academic curiosity for me.
  - +Switch to correlated monte carlo.  Yes.  It's currently uncorrelated.  That's bad.  More of a bug really.+ (Completed 2025-01-07)
  - Social Security survivor benefits -- not sure I need to do this...
  - +Support systems without STDOUT redirection.+ (Completed 2025-01-08)
  - +Print error messages to STDERR instead of STDOUT+ (Completed 2025-01-08)
  - +Add support for progress messages to STDOUT+ (Completed 2025-01-08)
  - +Support different SSI benefit levels.+ (Completed 2025-01-08)
  - Life Expectancy
    - +Life Table+ (Completed 2025-01-12)
      - +Add SSI Life tables module+ (Completed 2025-01-11)
      - +Data+ (Completed 2025-01-11)
        - +SSI male & female px * lx data+ (Completed 2025-01-11)
        - +CDC all, male, female, white people, white males, white females+ (Completed 2025-01-11)
      - +Life table computations: Given age and qx or lx, compute: qx (when given lx), lx (when given qx), dx, Lx, Tx, ex, mx, & px+ (Completed 2025-01-11)
      - +Compute the maximum age a person might reach (the year at which everyone is dead in the life table)+ (Completed 2025-01-11)
      - +Compute probably a person at a given age a given number of years+ (Completed 2025-01-11)
      - +Add random generator that uses life table as the distribution.  Take age into consideration.+ (Completed 2025-01-12)
    - simulation changes
      - +Option to set simulation end at highest survivor date in life table for sex of person+ (Completed 2025-01-12)
      - Add probability of survival given age to output table
      - Add a "probability of success" value adjusted with survival probability
      - Add graph showing probability of running out of cash by given date
      - Add graph showing probability of running out of cash by given date adjusted with survival probability
      - +Add dots to the trajectory graph showing when both people died+ (Completed 2025-01-12)
      - +Do MC lifespan+ (Completed 2025-01-12)

** Evaluating retirement planning software
:PROPERTIES:
:CUSTOM_ID: commonprob
:END:

I did a ton of research before I wrote this simulator.  I looked at dozens of wealth management and retirement planning tools.  Some free and some very
expensive.  Some super simple and some quite sophisticated.  Some utterly terrible and some pretty good.  In the end I have found myself using a couple online
tools in combination with this simulator.

One thing I realized is that there is no universal measure of quality or fitness for these kinds of tools.  At the end of the day it's all about your
situation and goals that determine if a tool will help you or not. So, it is important that you do your research.

In this section I have documented some of the common issues I found with various tools without naming any names.  My hope is that this list might help others
in doing the same kind of research.

 - Monte carlo deficiencies 
   - Not using historical data for simulation parameters.
     - Seriously.  I came across a couple client side JavaScript retirement calculators that were just doing uniform random numbers between -7 and 7 for
       market returns.  That's pure trash.
   - GBM models dubious parameter values.  
     - It's impossible to tell the difference between the result of an incorrect analysis of historical data and a made up number.
     - It is impossible to trust this kind of simulation unless they disclose the source for parameters.  My policy on this one is that if they won't share,
       then I can't trust them.  It's that simple.
   - Ignoring correlation
     - Uncorrelated GBM models for blended investments -- like bonds mixed with stocks.
     - Ignoring the correlation between inflation and bond returns.
   - Only doing MC on investment returns and not inflation.
   - Poor visualization and analysis capabilities for the results of MC simulations.
     - As I side note, I am convinced some of these tools exist only to publish the "probability of failure" metric as a marketing strategy.  They hope to scare
       people into paying for a financial advisor.  
   - Unwillingness to divulge the underlying models and assumptions.  
     - This is a deal breaker for me.  It's like the GBM parameter item above -- if they won't tell, then I won't trust them.
     - Note I'm not talking about "secret sauce" or "proprietary intellectual property".  I'm talking about the essential information required to understand
       the results.  How can we trust the "stock returns" MC if we don't even know what part of the market it's modeling?  Is it comprehending dividends and
       splits as part of the adjusted rate of return?  How is the REIT model incorporating dividends, and what is the reinvestment model?
     - One thing to know: If they don't have it documented, then ask them.  Many of the larger banks are more than willing to share this stuff.  Frequently
       they don't have it in formal documentation posted on the web page, but they do have it readily available for advisors so they can communicate the
       answers.
 - Poor tax estimation 
   - Blindly assuming a fixed tax rate over time is very common.
     - Note that some of the large banks do this, but they tune the rate to you.  They use your net worth and expenses to fit a fixed tax rate under the
       assumption of a savings draw-down strategy that will flatten out your taxes over time.  So the fixed tax rate thing isn't always bad, but you need to
       make sure the tool is being intelligent and not just "blindly picking a number".
   - Not adjusting tax brackets for inflation.
   - Inability to specify tax filing status and deduction methodology.
   - Not considering age related early withdrawal penalties for retirement accounts.
 - Roth conversions 
   - Most tools simply don't have the ability to plan for them at all
   - Failing to comprehend the 5 year withdrawal penalties
   - Failing to correctly compute tax consequences at time of conversion.
 - Social Security 
   - Not comprehending when one partner dies, or only having one SSI monthly value for the couple.
   - Not supporting, or incorrectly supporting, survivor benefits.
 - Most tools don't allow you to use MC on life span
 - Data security & privacy
   - Make sure they have a published privacy policy.  If they don't, assume anything you give them will be sold.
   - Do your best to verify data security.

* Operation
:PROPERTIES:
:CUSTOM_ID: ops
:END:

The simulator may be found in the [[https://github.com/richmit/FortranFinance][FortranFinance]] package under the sub-directory ~retirement_simulation~.  This
document forms the primary documentation, and its permanent home is [[https://richmit.github.io/FortranFinance/retirement_simulation/index.html][here]].

** Environment
:PROPERTIES:
:CUSTOM_ID: env
:END:

The simulator is designed to run in a command line environment (MSYS2 on Windows, UNIX, Linux, Linux on WSL, MacOS X).  I expect that you already have a
[[https://www.mitchr.me/SS/tools/index.html#fortran][Fortran development environment]], [[https://www.mitchr.me/SS/tools/index.html#scm][git]], and
[[https://www.mitchr.me/SS/tools/index.html#code-build][GNU Make]] installed.  In order to run the visualizations, you will need
[[https://www.mitchr.me/SS/tools/index.html#stats][R]] and the following CRAN packages installed: ~knitr~, ~jsonlite~, ~quantmod~, ~gridExtra~, ~data.table~,
~dplyr~, ~tidyr~, ~ggplot2~, ~scales~, ~RColorBrewer~.

** Download 
:PROPERTIES:
:CUSTOM_ID: down
:END:

The easiest way to download everything is to clone with git:

#+begin_src sh
git clone 'https://github.com/richmit/FortranFinance.git'
#+end_src

** Software Build
:PROPERTIES:
:CUSTOM_ID: build
:END:

The simulator is in the ~retirement_simulation~ directory.  That directory contains a ~makefile~ that will build the application.  You may need
to edit that makefile for your system configuration -- follow the instructions  [[file:../MRFFL/index.html#examples][here]].  Once you have the
~makefile~ working, you can build with the following command:

#+begin_src sh
make retire
#+end_src

This will result in a executable (named "~retire~" on most UNIX-like platforms, and "~retire.exe~" on Windows).  

** Running The Simulator
:PROPERTIES:
:CUSTOM_ID: dowrun
:END:

The ~retire~ command takes the name of the the configuration describeing the simulation parameters as an optional argument.  If it is missing, then the name
is assumed to be "~retire.nml~".  This document contains a couple example configuration files: [[#case_20_config][config_20.nml]] and
[[#case_60_config][config_60.nml]].

When run, the ~retire~ command will place its results in a file called "~retire.out~".  This output file is a simple text file that you could load into Excel
to analyze.  I use an [[https://www.mitchr.me/SS/tools/index.html#stats][R]] script for the analysis called "~retire.R~".  If you run this script, you will
get lots of graphics (see the [[#examples][Examples]] section below).  In summary, you might do the following:

#+begin_src sh
./retire.exe my_config.nml
R -q -f retire.R
#+end_src

* Examples
:PROPERTIES:
:CUSTOM_ID: examples
:END:

** Just Starting Out
:PROPERTIES:
:CUSTOM_ID: case_20_intro
:END:

#+begin_src sh :results output raw :exports results 
grep -v '^ *$' ~/world/my_prog/finance/FortranFinance/retirement_simulation/config_20.nml | grep -B 10 '^!---' | grep -A 10 '^!---' | grep -v '^!---' | sed 's/^! *//'
#+end_src

#+RESULTS:
Here we have a couple starting to save for retirement at age 25.  They both have good jobs earning 100K, and they
spend 100K per year on expenses.  Work income is growing at 2.5%. They currently have no retirement savings, but wish
to start saving aggressively.  They believe they can earn 4% on investments, and inflation will be about 3%.  Note work
income is not keeping up with inflation. They have 10K in checking and 10K in an emergency fund.  The checking account
earns 0.01% interest, and the emergency fund is in CDs earning 3%.

*** Fixed
:PROPERTIES:
:CUSTOM_ID: case_20_fixed
:END:

The graphs in this section are what you get from ~retire.R~ when the simulation has no monte carlo.  This is similar to what most retirement calculators will
generate.

This first graph simply shows total savings balance by account type.

  [[file:pics/savings_20_fix_full.png][file:pics/savings_20_fix_800x.png]]

This graph shows us paid vs unpaid expenses.  Expenses are broken into two categories (taxes & living expenses).

  [[file:pics/paidunpaid_20_fix_full.png][file:pics/paidunpaid_20_fix_800x.png]]

This graph also deals with expenses, but shows how the expenses are paid.  Note the pink bit starting 2050 showing the couple using savings for expenses well
before retirement.  This is what happens when salary doesn't keep up with inflation!

  [[file:pics/paidsource_20_fix_full.png][file:pics/paidsource_20_fix_800x.png]]

*** MC
:PROPERTIES:
:CUSTOM_ID: case_20_mc
:END:

The graphs in this section are what you get from ~retire.R~ when the simulation has monte carlo.  

This first graph shows the probability the savings balance trajectory will be within the color band.  For example the inner green band contains 50% of all
simulation runs.  The yellow band, which includes the green band, contains 80% of all simulation runs.  You can change the number and bounds for the bands in
the ~retire.R~ script.

  [[file:pics/savings_crg_20_mc_full.png][file:pics/savings_crg_20_mc_800x.png]]

This graph shows 2000 savings trajectories, all the failure trajectories (when we went broke), and an envelope for the highest balance for trajectories that
failed.  In essence the green line shows a "safe" balance at which we are unlikely to see failure.

  [[file:pics/compColCases_20_mc_full.png][file:pics/compColCases_20_mc_800x.png]]

This graph is similar to the probability band graph, but is a more traditional presentation for people accustomed to box plots.

  [[file:pics/simCompBox_20_mc_full.png][file:pics/simCompBox_20_mc_800x.png]]

This graph shows us the ages at which simulations went broke, and how frequently it occurred for each age group.  Each bar spans three years.

  [[file:pics/brokeAge_20_mc_full.png][file:pics/brokeAge_20_mc_800x.png]]

Lastly we have a graph that shows us the probability distribution of final savings balance at the end of the simulation.

  [[file:pics/endSavings_20_mc_full.png][file:pics/endSavings_20_mc_800x.png]]

*** Config File
:PROPERTIES:
:CUSTOM_ID: case_20_config
:END:

#+begin_src sh :results output verbatum :exports results :wrap "src f90 :eval never :tangle no"
grep -A 1000 '^&SIMPARM' ~/world/my_prog/finance/FortranFinance/retirement_simulation/config_20.nml
#+end_src

#+RESULTS:
#+begin_src f90 :eval never :tangle no
&SIMPARM
monte_carlo_years                   = 40,        !! Years of reference data to use
monte_carlo_runs                    = 1000,     !! Number of sims

initial_brokerage_balance           = 0.0,       !! Sum of all normally taxable accounts
initial_ira_balance_p1              = 0.0,       !! Sum of all tax deferred accounts for p1
initial_ira_balance_p2              = 0.0,       !! Sum of all tax deferred accounts for p2
initial_roth_balance_p2             = 0.0,       !! Sum of all roth-like tax deferred accounts for p2
initial_roth_balance_p1             = 0.0,       !! Sum of all roth-like tax deferred accounts for p1

high_investment_p                   = 100.0,     !! percentage of investments at high growth
mid_investment_p                    = 0.0,       !! percentage of investments at medium growth
low_investment_p                    = 0.0,       !! percentage of investments at low growth

high_investment_apr                 = 4.0,       !! apr for investments at high growth
                                                 !! Used for retirement accounts and the brokerage!
                                                 !! If negative, then do monte carlo with snp_dat
mid_investment_apr                  = 0.0,       !! apr for investments at medium growth
                                                 !! Used for retirement accounts and the brokerage!
                                                 !! If negative, then set to high_investment_apr/2
low_investment_apr                  = 0.0,       !! apr for investments at low growth
                                                 !! Used for retirement accounts and the brokerage.
                                                 !! If negative, then do monte carlo with dgs10_dat
cash_position_growth                = 2.5,       !! par for cash position in investment accounts
                                                 !! Used for retirement accounts and the brokerage.

initial_cash_reserves               = 10000.0,   !! Sum of all cash reserves
cash_reserves_growth                = 0.01,      !! Growth for cash reserves account

initial_emergency_fund              = 10000.0,   !! Near zero risk investments
emergency_fund_growth               = 3.0,       !! Rate at which the emergency account grows
                                                 !! If negative, then set to low_investment_apr

first_year_tax                      = 1000.0,    !! Taxes to pay the first year of the simulation

worst_case_inflation_rate           = -5.0,      !! Used for investment cut-off decisions
                                                 !! If negative, don't use a cuff-off
fixed_inflation_rate                = -3.0,       !! Inflation impacts annual expenses
                                                 !! If negative, then do monte carlo

initial_expected_annual_expenses    = 100000.0,  !! First year expenses.

social_security_start_age_p1        = 65,        !! First year we get SS for p1
social_security_start_age_p2        = 65,        !! First year we get SS for p2
initial_social_security_monthly_p1  = 1000.0,    !! Just a guess.  Probably low.
initial_social_security_monthly_p2  = 1000.0,    !! Just a guess.  Probably low.
social_security_growth              = 3.0,       !! Usually matches inflation
                                                 !! If negative, then set to inflation

initial_gross_work_salary_p1        = 100000.0,  !! Taxable part of p1's salary
initial_gross_work_salary_p2        = 100000.0,  !! Taxable part of p2's salary
work_salary_growth                  = 2.0,       !! Hard to estimate
                                                 !! If negative, then set to max(0, inflation/2)

initial_annual_ira_contrib_base     = 23000.0,   !! Starting base contribution
initial_annual_ira_contrib_catchup  = 7000.0,    !! Starting catchup contribution
annual_ira_contrib_growth           = -3.0,      !! Grow 401k contribution (inflation?)
                                                 !! If negative, then set to inflation

initial_annual_roth_contrib_base    = 0.0,       !! Starting base contribution
initial_annual_roth_contrib_catchup = 0.0,       !! Starting catchup contribution
annual_roth_contrib_growth          = 0.0,       !! Grow 401k contribution
                                                 !! If negative, then set to inflation

target_taxable_income               = 0,         !! Target tax for roth conversion
minimum_roth_conversion             = 0,         !! Minimum size of roth conversion
maximum_roth_conversion_year        = 0,         !! No conversions after this year

surplus_reinvest                    = 100.0,     !! Percentage of ExtraNS to reinvest

retirement_year_p1                  = 2065,      !! First year p1 is fully retired
retirement_year_p2                  = 2065,      !! First year p2 is fully retired
birthday_p1                         = 2000,      !!
birthday_p2                         = 2000,      !!
life_expectancy_p1                  = 110,       !!
life_expectancy_p2                  = 110,       !!

verbosity                           = 10         !! How much to print when running
                                                 !!  -  0 : nothing
                                                 !!  - 10 : progress
                                                 !!  - 20 : variables
                                                 !!  - 30 : more variables
/
#+end_src



** Approaching Retirement
:PROPERTIES:
:CUSTOM_ID: case_60_intro
:END:

#+begin_src sh :results output raw :exports results 
grep -v '^ *$' ~/world/my_prog/finance/FortranFinance/retirement_simulation/config_60.nml | grep -B 10 '^!---' | grep -A 10 '^!---' | grep -v '^!---' | sed 's/^! *//'
#+end_src

#+RESULTS:
Here we have a couple (47 & 55 years old).  Each have 500k in a 401k.  They plan on putting 50% in the S&P, and 50% in
low risk 5% funds. They also have 100k balances in both an emergency fund and checking account.  The checking account
earns 0.01% interest, and the emergency fund is in CDs earning 3%. They are both employed, and are have aggressively
saving at the maximum rate into a 401k.  They spend 110K per year on expenses.  They believe inflation will be about
3%.  They both wish to stop working when they are 60. The younger person will start taking SS at 63 while the older
one will start at age 70.

*** A Risky Plan
:PROPERTIES:
:CUSTOM_ID: case_60_danger
:END:

In my opinion, this plan is too aggressive.  I know the S&P 500 has an average return of 10% over the last couple decades, but depending on a 7% return is just
too risky.  This is especially true with only 1M in total savings.

Things look just fine if we consider a simulation using ideal, fixed growth and inflation.  Here is what the overall savings balance looks:

  [[file:pics/savings_60_fix_full.png][file:pics/savings_60_fix_800x.png]]

If we take a look at the savings probability bands, we see a very different picture:

  [[file:pics/savings_crg_60_mc_full.png][file:pics/savings_crg_60_mc_800x.png]]

And if we look at a few paths and the account collapse cases, things look pretty scary:

  [[file:pics/compColCases_60_mc_full.png][file:pics/compColCases_60_mc_800x.png]]

Another way to look at this is the distribution of final savings.  That huge bar on the left tells us that the single most probable outcome of this plan is to
run out of money.

  [[file:pics/endSavings_60_mc_full.png][file:pics/endSavings_60_mc_800x.png]]

*** An Alternate Plan
:PROPERTIES:
:CUSTOM_ID: case_60_ml
:END:

They can dramatically improve the chances of success by saving more (bumping up total savings by 250k), and spending less (drop annual expenses by 1k).  

The new savings probability bands are much more positive:

  [[file:pics/savings_crg_60ml_mc_full.png][file:pics/savings_crg_60ml_mc_800x.png]]

And the overall path picture is much more positive:

  [[file:pics/compColCases_60ml_mc_full.png][file:pics/compColCases_60ml_mc_800x.png]]

Lastly, the distribution of final savings no longer shows dying broke as the highest probability outcome.

  [[file:pics/endSavings_60ml_mc_full.png][file:pics/endSavings_60ml_mc_800x.png]]

*** Config Files
:PROPERTIES:
:CUSTOM_ID: case_60_config
:END:

The original plan config file is here:

#+begin_src sh :results output verbatum :exports results :wrap "src f90 :eval never :tangle no"
grep -A 1000 '^&SIMPARM' ~/world/my_prog/finance/FortranFinance/retirement_simulation/config_60.nml
#+end_src

#+RESULTS:
#+begin_src f90 :eval never :tangle no
&SIMPARM
monte_carlo_years                   = 40,        !! Years of reference data to use
monte_carlo_runs                    = 10000,     !! Number of sims

initial_brokerage_balance           = 0.0,       !! Sum of all normally taxable accounts
initial_ira_balance_p1              = 1000000.0, !! Sum of all tax deferred accounts for p1
initial_ira_balance_p2              = 1000000.0, !! Sum of all tax deferred accounts for p2
initial_roth_balance_p2             = 0.0,       !! Sum of all roth-like tax deferred accounts for p2
initial_roth_balance_p1             = 0.0,       !! Sum of all roth-like tax deferred accounts for p1

high_investment_p                   = 50.0,      !! percentage of investments at high growth
mid_investment_p                    = 50.0,      !! percentage of investments at medium growth
low_investment_p                    = 0.0,       !! percentage of investments at low growth

high_investment_apr                 = 7.0,       !! apr for investments at high growth
                                                 !! Used for retirement accounts and the brokerage!
                                                 !! If negative, then do monte carlo with snp_dat
mid_investment_apr                  = 5.0,       !! apr for investments at medium growth
                                                 !! Used for retirement accounts and the brokerage!
                                                 !! If negative, then set to high_investment_apr/2
low_investment_apr                  = 0.0,       !! apr for investments at low growth
                                                 !! Used for retirement accounts and the brokerage.
                                                 !! If negative, then do monte carlo with dgs10_dat
cash_position_growth                = 2.5,       !! par for cash position in investment accounts
                                                 !! Used for retirement accounts and the brokerage.

initial_cash_reserves               = 100000.0,  !! Sum of all cash reserves
cash_reserves_growth                = 0.01,      !! Growth for cash reserves account

initial_emergency_fund              = 100000.0,  !! Near zero risk investments
emergency_fund_growth               = 3.0,       !! Rate at which the emergency account grows
                                                 !! If negative, then set to low_investment_apr

first_year_tax                      = 50000.0,   !! Taxes to pay the first year of the simulation

worst_case_inflation_rate           = -5.0,      !! Used for investment cut-off decisions
                                                 !! If negative, don't use a cuff-off
fixed_inflation_rate                = 3.0,       !! Inflation impacts annual expenses
                                                 !! If negative, then do monte carlo

initial_expected_annual_expenses    = 110000.0,  !! First year expenses.

social_security_start_age_p1        = 63,        !! First year we get SS for p1
social_security_start_age_p2        = 70,        !! First year we get SS for p2
initial_social_security_monthly_p1  = 1000.0,    !! Just a guess.  Probably low.
initial_social_security_monthly_p2  = 1000.0,    !! Just a guess.  Probably low.
social_security_growth              = 3.0,       !! Usually matches inflation
                                                 !! If negative, then set to inflation

initial_gross_work_salary_p1        = 170000.0,  !! Taxable part of p1's salary
initial_gross_work_salary_p2        = 180000.0,  !! Taxable part of p2's salary
work_salary_growth                  = 2.0,       !! Hard to estimate
                                                 !! If negative, then set to max(0, inflation/2)

initial_annual_ira_contrib_base     = 23000.0,   !! Starting base contribution
initial_annual_ira_contrib_catchup  = 7000.0,    !! Starting catchup contribution
annual_ira_contrib_growth           = -3.0,      !! Grow 401k contribution (inflation?)
                                                 !! If negative, then set to inflation

initial_annual_roth_contrib_base    = 0.0,       !! Starting base contribution
initial_annual_roth_contrib_catchup = 0.0,       !! Starting catchup contribution
annual_roth_contrib_growth          = 0.0,       !! Grow 401k contribution
                                                 !! If negative, then set to inflation

target_taxable_income               = 0,         !! Target tax for roth conversion
minimum_roth_conversion             = 0,         !! Minimum size of roth conversion
maximum_roth_conversion_year        = 0,         !! No conversions after this year

surplus_reinvest                    = 100.0,     !! Percentage of ExtraNS to reinvest

retirement_year_p1                  = 2037,      !! First year p1 is fully retired
retirement_year_p2                  = 2029,      !! First year p2 is fully retired
birthday_p1                         = 1977,      !!
birthday_p2                         = 1969,      !!
life_expectancy_p1                  = 110,       !!
life_expectancy_p2                  = 110        !!

verbosity                           = 10         !! How much to print when running
                                                 !!  -  0 : nothing
                                                 !!  - 10 : progress
                                                 !!  - 20 : variables
                                                 !!  - 30 : more variables
/
#+end_src

The updated plan changes these lines

#+begin_src f90
initial_ira_balance_p1              = 625000.0, !! Sum of all tax deferred accounts for p1
initial_ira_balance_p2              = 625000.0, !! Sum of all tax deferred accounts for p2
high_investment_p                   = 80.0,     !! percentage of investments at high growth
mid_investment_p                    = 20.0,     !! percentage of investments at medium growth
initial_expected_annual_expenses    = 100000.0, !! First year expenses.
#+end_src

* Platform Notes & Testing
:PROPERTIES:
:CUSTOM_ID: platforms
:END:

Note that MRFFL works on a smaller set of compilers & platforms than the retirement simulator.  In particular, MRFFL has some limitations on what platforms
support the TVM modules because they use nested functions for numerical solvers, and therefore require an executable stack.  The retirement simulator doesn't
use those parts of the TVM modules, and thus is free from those limitations.

** Tested Environments
:PROPERTIES:
:CUSTOM_ID: testenv
:END:

 - MSYS2 running on Windows 11 :: 
   - GNU Fortran (Rev2, Built by MSYS2 project) 14.2.0 : Everything works
   - LFortran 0.42.0 LLVM 19.1.3 : Nothing works.  Compiler crashes during compile.
   - Intel ifx 2024.1.0 Build 20240308 : Everything works
   - flang 19.1.6 inside clang: Everything works
 - Debian 12.8 running in WSL on Windows 11 ::
   - GNU Fortran (Debian 14.2.0-8) 14.2.0 from debian-testing: Everything works
   - LFortran 0.42.0 LLVM 19.1.3 : Nothing works.  Compiler crashes during compile.
   - Intel ifx 2025.0.4 20241205 : Everything works
   - nvfortran 24.11-0 64-bit target on x86-64 Linux : Everything works.
   - flang-new version 19.1.6 : Everything works.
