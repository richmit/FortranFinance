# -*- Mode:Org; Coding:utf-8; fill-column:158 -*-
# ######################################################################################################################################################.H.S.##
# FILE:        README.org
#+TITLE:       MR Fortran Finance Library (MRFFL)
#+SUBTITLE:    Primary Documentation
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DATE:        2025-01-02
#+DESCRIPTION: MR Fortran Finance Library (MRFFL) documentation landing page
#+KEYWORDS:    finance fortran monte carlo inflation cashflow time value of money tvm percentages taxes stock market
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil 
#+SEQ_TODO:    TODO:NEW(t)                         TODO:WORK(w)    TODO:HOLD(h)    | TODO:FUTURE(f)   TODO:DONE(d)    TODO:CANCELED(c)
#+PROPERTY: header-args :eval never-export
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
# Change max-width to get wider output -- also note #content style below
#+HTML_HEAD: <style>body { min-width: 500px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>.subtitle { font-size: 0.6em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_HEAD: <style>blockquote { margin-bottom: 0.5em; padding: 0.5em; background-color: #FFF8DC; border-left: 2px solid #A5573E; border-left-color: rgb(255, 228, 102); display: block; margin-block-start: 1em; margin-block-end: 1em; margin-inline-start: 5em; margin-inline-end: 5em; } </style>
# Change the following to get wider output -- also note body style above
#+HTML_HEAD: <style>#content { max-width: 60em; }</style>
#+HTML_LINK_HOME: https://github.com/richmit/FortranFinance
#+HTML_LINK_UP: https://richmit.github.io/FortranFinance/index.html
# ######################################################################################################################################################.H.E.##

* Introduciton
:PROPERTIES:
:CUSTOM_ID: intro
:END:

The functionality powering the programs published in the [[https://github.com/richmit/FortranFinance][FortranFinance]] repository is contained in the
[[https://github.com/richmit/FortranFinance/tree/main/MRFFL][MR Fortran Finance Library (MRFFL)]].  MRFFL is a collection of Fortran modules that include
advanced TVM solver computations, cashflow stream analysis, US tax calculations, and some monte carlo capabilities (US interest rates & US stock market
returns).

API documentation may be found here: [[https://www.mitchr.me/SS/FortranFinance/MRFFL_API_Docs/index.html][MR Fortran Finance Library (MRFFL) API Documentation]]

The TVM solvers differs from other TVM software I've used in that both annuities (level/geometric/arithmatic) and lump sums are generalized.  Annuity payments
can stop and start on arbitrary period boundaries within the term.  Similarly, lump sums can occur at any payment boundary.  This means the solvers can handle
a variety of lump sum & annuity types (due, ordinary, delayed, early ending).  Together this allows one to solve some difficult, non-standard TVM problems.

The cashflow stream module uses a similar generalization in that cashflows can be placed at any period boundary.  This eliminates the need to treat the
cashflow at time zero as special.  It also eliminates the need to bother with that BEGIN or END mode nonsense.  Without these complications we can group
cashflow sequences together without worry about the mode of each or period alignment issues that plague some other cashflow software.  The module includes
cashflow series builders using the same notation and variables as the TVM solvers allowing one to use the TVM solvers to find necessary values, and then use
the same variables to populate a cashflow that can be further analyzed or printed.

* MRFFL (MR Fortran Finance Library) Modules
:PROPERTIES:
:CUSTOM_ID: modlist
:END:

  - Financial applications ::
    - ~mrffl_config~       :: Contains parameters used to configure the rest of the modules.
    - ~mrffl_cashflows~    :: TVM problems involving cash flows.
    - ~mrffl_percentages~  :: Working with percentages
    - ~mrffl_us_inflation~ :: Historical US inflation data.  Adjust values across years.  Random inflation generation via resampling.
    - ~mrffl_us_markets~   :: Historical stock market annual return data.  Includes random return generation via resampling.
    - ~mrffl_us_taxes~     :: Basic US tax information and computation for filing joint or single.
    - ~mrffl_tvm~          :: TVM solvers for: deferred lump sums and  generalized level/geometric/arithmatic annuities.
    - ~mrffl_tvm12~        :: Classic financial calculator style TVM solver and amortization.
    - ~mrffl_prt_sets~     :: Constants to specify things to print (used by ~*_print~ routines)
    - ~mrffl_var_sets~     :: Constants to specify variables (used by TVM solvers to specify unknown variables)
  - Support Modules        ::
    - ~mrffl_solver~       :: Solves equations using bisection -- used by the TVM solvers in the ~tvm~ & ~tvm12~ modules.
    - ~mrffl_stats~        :: Statistics stuff -- resamplers, random variables (gamma & log-gamma), etc...
    - ~mrffl_bitset~       :: Bitsets used by TVM solvers for unknown variables.

* Example Programs
:PROPERTIES:
:CUSTOM_ID: examples
:END:

You will find several programs, most of which use MRFFL, in various directories at the base of the
[[https://github.com/richmit/FortranFinance][FortranFinance]] repository:
  - [[https://github.com/richmit/FortranFinance/tree/main/cashflows][cashflows]]                           (TBD -- in work) :: Some simple MRFFL cashflow examples.
  - [[https://github.com/richmit/FortranFinance/tree/main/loans][loans]]                                   (TBD -- in work) :: Illustrates how to use MRFFL TVM solvers in combination with cashflow series.
  - [[https://github.com/richmit/FortranFinance/tree/main/monte_carlo][monte_carlo]]                       (TBD -- in work) :: Illustrates basic resampling monte carlo for inflation and stock market returns.
  - [[https://github.com/richmit/FortranFinance/tree/main/MRFFL_functional_tests][MRFFL_functional_tests]]                  :: Functional tests for MRFFL.  While these are basic MRFFL tests, they also demonstrate the API.
  - [[https://github.com/richmit/FortranFinance/tree/main/MRFFL_unit_tests][MRFFL_unit_tests]]             (TBD -- in work) :: Unit (well unit-like) tests for MRFFL.  These also demonstrate the API; however, they can be a bit complex.
  - [[https://github.com/richmit/FortranFinance/tree/main/retirement][retirement]]                         (TBD -- in work) :: Some TVM based retirement computations.
  - [[https://github.com/richmit/FortranFinance/tree/main/retirement_simulation][retirement_simulation]]   (TBD -- in work) :: A comprehensive simulator for a married couple's retirement (not much MRFFL used here)

I use a GNU make based build flow.  You *must* use GNU make to utilize it as I've used some GNU make'isms in the makefiles.  If you don't use GNU make you are
pretty much on your own.

In order to compile these on your platform you may need to modify the ~makefile~ in each directory to use your favorite Fortran compiler.  At the top of each
makefile you will find something like this:

#+begin_src sh :results output verbatum :exports results :wrap "src makefile :eval never :tangle no"
head -n 20 ../../MRFFL_unit_tests/makefile | grep -B 20 '#####' | grep -A 20 '#####' | sed -E 's/^####*/################################################/'
#+end_src

#+RESULTS:
#+begin_src makefile :eval never :tangle no
################################################

MRFFL_PATH = ../MRFFL

include $(MRFFL_PATH)/tools_gfortran.mk
# include $(MRFFL_PATH)/tools_flang.mk
# include $(MRFFL_PATH)/tools_ifx.mk
# include $(MRFFL_PATH)/tools_lfortran.mk
# include $(MRFFL_PATH)/tools_nvfortran.mk

include $(MRFFL_PATH)/include.mk

################################################
#+end_src

If you are using ~gfortran~ on a UNIX'ish system, then you can probably just leave it as is.  If you want to use a different compiler, then you may be able to
simply uncomment the appropriate line if your system is similarly configured to mine.  If you are unlucky, then you may need to set some variables.  In
particular, you might need to comment out the ~gfortran~ include and add something like this:

#+begin_src sh :results output verbatum :exports results :wrap "src makefile :eval never :tangle no"
~/core/codeBits/bin/src2orgListing ../../MRFFL/tools_nvfortran.mk
#+end_src

#+RESULTS:
#+begin_src makefile :eval never :tangle no
AR := ar
FC := nvfortran
FFLAGS := -O3 -Wall  -W -Xlinker -z -Xlinker execstack
FSHFLG = -o $(MRFFL_SHARED_LIB_FILE) -shared $(MRFFL_OBJ_FILES)
#+end_src

The only tricky one is the ~FSHFLG~ variable.  Luckily you only need the ~FSHFLG~ variable if you plan on building a shared library.  The shared library is
completely unnecessary for making full use of the modules, so you you can safely ignore that one unless you really, really want to use a shared library. ~;)~

* Using MRFFL (MR Fortran Finance Library) Modules
:PROPERTIES:
:CUSTOM_ID: use
:END:

All of the code is in the module source files with no external dependencies at all.  So you just need to call the modules from your code, and then
compile/link everything together.


To help with that compile/link part, a makefile fragment has been provided
([[https://github.com/richmit/FortranFinance/tree/main/MRFFL/include.mk][~include.mk~]]).  Note it works with GNU make and is designed for UNIX-like
environments (Mac OS X, Linux, MSYS2 on Windows 11, WSL on Windows 11).  I mostly use MSYS2 on Windows 11 so that is where it gets the most testing.  The
makefile in the [[https://github.com/richmit/FortranFinance/tree/main/MRFFL_functional_tests][functional tests directory]] is a good guide on how to use
[[https://github.com/richmit/FortranFinance/tree/main/MRFFL/include.mk][~include.mk~]].  In essence you do the following in your makefile:

  1) Set MRFFL_PATH in your makefile to the path of the MRFFL source directory -- that's the one with the ~include.mk~ file.
  2) Set FC, FFLAGS, & AR if necessary -- most of the time you can use the defaults.
  3) Include the "~include.mk~" file in the MRFFL source directory.
  4) Add a build rule for your program.

Your makefile will look something like this:

#+begin_src makefile
MRFFL_PATH = ../MRFFL

# Set FC, FFLAGS, & AR here.  The include below has the settings I use on my system.	
include $(MRFFL_PATH)/tools_gfortran.mk 

include $(MRFFL_PATH)/include.mk

your_program : your_program.f90 $(MRFFL_OBJ_FILES)
	$(FC) $(FFLAGS) $^ -o $@
#+end_src

Note the rule in the makefile above takes the lazy approach of adding every MRFFL module as a dependency regardless of if your program actually needs them
all.  This is how most people use the modules because it's simple.  The cost might be a couple seconds of extra compile time.  You can explicitly list out the
modules in the makefile if you wish.  Such a rule might look like the following:

#+begin_src makefile
your_program : your_program.f90 mrffl_config$(OBJ_SUFFIX) mrffl_tvm$(OBJ_SUFFIX) mrffl_solver$(OBJ_SUFFIX) 
	$(FC) $(FFLAGS) $^ -o $@
#+end_src

* Notes about ~include.mk~
:PROPERTIES:
:CUSTOM_ID: makeinc
:END:

** Names of files
:PROPERTIES:
:CUSTOM_ID: makeinc-names
:END:

  - File extensions on Windows (outside of WSL) ::
   - Executable files use ~.exe~
   - Shared libraries use ~.dll~
   - Object files will ~.obj~
  - On UNIX systems (not including MSYS2) ::
   - Executable files have no extension
   - Shared libraries use ~.so~
   - Object files will use ~.o~

** Useful Variables
:PROPERTIES:
:CUSTOM_ID: makeinc-vars
:END:

  - ~MRFFL_MOD_FILES~       :: All the module (~.mod~) files.  These will appear in your build directory.
  - ~MRFFL_OBJ_FILES~       :: All the object (~.obj~ or ~.o~) files.  These will appear in your build directory.
  - ~MRFFL_STATIC_LIB_FILE~ :: The name of the static library file.  It's not created by default.  It will appear in your build directory if it is listed as a dependency on one of your targets.
  - ~MRFFL_SHARED_LIB_FILE~ :: The name of the shared library file.  It's not created by default.  It will appear in your build directory if it is listed as a dependency on one of your targets.

** Useful Targets
:PROPERTIES:
:CUSTOM_ID: makeinc-target
:END:

  - ~all_mrffl_lib~     :: Builds the library files.
  - ~all_mrffl_mod~     :: Builds the module (~.mod~) files
  - ~all_mrffl_obj~     :: Builds the object (~.obj~ or ~.o~) files
  - ~clean_mrffl_mod~   :: Deletes all the MRFFL module (~.mod~) files in the build directory.
  - ~clean_mrffl_obj~   :: Deletes all the MRFFL object (~.obj~ or ~.o~) files in the build directory.
  - ~clean_mrffl_lib~   :: Deletes all the library files in the build directory.
  - ~clean_mrffl~       :: Simply calls the following targets: ~clean_mrffl_mod~, ~clean_mrffl_obj~, & ~clean_mrffl_lib~
  - ~clean_multi_mrffl~ :: The previous clean targets will only remove products from the current platform.  For example, the ~clean_mrffl_obj~ target will
                           delete object files with an extension of ~.obj~ on windows and an extension of ~.o~ on UNIX'ish platforms.  I use the same directories to
                           build for all platforms, so I sometimes want to clean up the build products from all platforms at once.  That's what this target will do.

** Static Library
:PROPERTIES:
:CUSTOM_ID: makeinc-stlib
:END:

A rule to make a static library is included in ~include.mk~.  A build rule like the following should build that library and link it to your executable.  Note
I'm just including the library file on the command line instead of linker like options (i.e. ~-L~ and ~-l~ for GNU compilers).  That's because simply including
the library on the command line is broadly supported across more compilers -- this way I don't have to document how to do the same thing for each one. ;)

#+begin_src makefile
your_program : your_program.f90 $(MRFFL_STATIC_LIB_FILE)
	$(FC) $(FFLAGS) $^ $(MRFFL_STATIC_LIB_FILE) -o $@
#+end_src

** Dynamic Library (~.so~ and ~.dll~ files)
:PROPERTIES:
:CUSTOM_ID: makeinc-dylib
:END:

A rule to make a static library is included in ~include.mk~.  You can build it with the target ~clean_mrffl_lib~, or by using ~$(MRFFL_SHARED_LIB_FILE)~ as a
dependency in your build rule.  As the options to link to a shared library differ wildly across platforms and compilers/linkers, I don't provide an example of
how to do that.

* Tested Environments
:PROPERTIES:
:CUSTOM_ID: testenv
:END:

 - MSYS2 running on Windows 11 :: 
   - GNU Fortran (Rev2, Built by MSYS2 project) 14.2.0 : Everything works
   - LFortran 0.42.0 LLVM 19.1.3 : Nothing works.  Compiler crashes during compile.
   - Intel ifx 2024.1.0 Build 20240308 : Everything works
   - flang 19.1.6 : TBD
 - Debian 12.8 running in WSL on Windows 11 ::
   - GNU Fortran (Debian 14.2.0-8) 14.2.0 from debian-testing: Everything works
   - LFortran 0.42.0 LLVM 19.1.3 : Nothing works.  Compiler crashes during compile.
   - Intel ifx 2025.0.4 20241205 : Everything works
   - nvfortran 24.11-0 64-bit target on x86-64 Linux : Everything works.
   - flang-new version 19.1.6 : TBD
